from pyramid.httpexceptions import HTTPFoundfrom pyramid.response import Response, FileResponsefrom pyramid.url import route_urlfrom pyramid.view import view_configfrom pyramid.events import ApplicationCreatedfrom pyramid.events import NewRequestfrom pyramid.events import subscriberimport sqlite3import randomimport stringimport hashlibimport loggingimport time# todo - check out if you can sniff anything on http# todo - stress testing# todo - any random page takes him to his progress :D# todo - secure apache serverlog = logging.getLogger(__name__)####### - FILE PATHStableschema_path = '/Users/bhavul.g/Downloads/Own-development-related-stuff/GIDS-puzzle-final/puzzle-project/puzzle/schema.sql'tasksdb_path = '/Users/bhavul.g/Downloads/Own-development-related-stuff/GIDS-puzzle-final/puzzle-project/puzzle/tasks.db'################## ------- important commands -----------# inside /var/www/GIDS-puzzle-final# virtualenv -p python venv27# . venv27/bin/activate# inside puzzle-project (where you have setup.py)# ../env/bin/pserve development.ini --reload################## ---- Subscribers --------@subscriber(ApplicationCreated)def application_created_subscriber(event):    with open(tableschema_path) as f:        stmt = f.read()        settings = event.app.registry.settings        db = sqlite3.connect(tasksdb_path)        db.executescript(stmt)        db.commit()@subscriber(NewRequest)def new_request_subscriber(event):    request = event.request    settings = request.registry.settings    request.db = sqlite3.connect(tasksdb_path)    request.add_finished_callback(close_db_connection)def close_db_connection(request):    request.db.close()########## ------------- Util methods ------------------def getSessionHashString(sessionHash):    if type(sessionHash) is list:        return sessionHash[0]    elif type(sessionHash) is tuple:        return sessionHash[0]    else:        return sessionHashdef nameIsValid(name):    breakName = name.split()    for part in breakName:        if not part.isalpha():            log.error("The name "+name+" is not valid")            return False    return Truedef generateVerifyCode():    return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))def generateSessionHash(request):    sessionHash = ''.join(random.choice(string.ascii_uppercase + string.digits + string.ascii_lowercase) for _ in range(15))    rs = request.db.execute('select sessionhash from bhailog where sessionhash = (?);',[sessionHash])    if len(rs.fetchall()) == 0:        log.info("Generated a new sessionHash - "+sessionHash)        return sessionHash    else:        return generateSessionHash(request)def successful_signup(request,dict):    log.info("entered successful_signup")    verifyCode = generateVerifyCode()    sessionHash = generateSessionHash(request)    try:        #here        request.db.execute(            'insert into bhailog (name, email, phone, sessionhash, verifycode, progress) values (?, ?, ?, ?, ?, ?);',            [dict['name'].upper(), dict['email'].lower(),dict['contact'],sessionHash,verifyCode,0])        request.db.execute('insert into events (sessionhash,description) values (?,?);',[sessionHash,'Signed up'])        request.db.commit()        setSessionHash(request,sessionHash)        log.info("[successful_signup] signup done. sessionHash set into request")    except Exception as e:        log.warning("Exception occured while trying to signup. Probably conflicting email/contact - "+str(e))        rs = request.db.execute('select sessionhash from bhailog where name = (?) and email = (?) and phone = (?);',[dict['name'].upper(),dict['email'].lower(),dict['contact']])        resultArray = rs.fetchall()        if len(resultArray) == 0:            return signup_failed()        else:            log.info("[successful_signup] Existed in user tables. Logging in back.")            sessionHash = resultArray[0]            setSessionHash(request,sessionHash)            log.info("[successful_signup] sessionHash set into request")    return moveToCorrectPage(request)def signup_failed():    log.error("[signup_failed] signup has failed.")    return {        'errors':'your signup has failed. Some input was incorrectly filled.',        'message': 'Please input your correct details to signup for the puzzle.',        'optionalmsg':''    }def checkForEmptyValue(value):    if not value:        return Truedef incrementProgress(request):    # all problem is here. getProgressUsingSession could return a HTTPFound, but i was trying to increment it. Fixed now.    progress = getProgressUsingSession(request)    progress = int(progress)    sessionHash = getSessionHash(request)    sessionHash = getSessionHashString(sessionHash)    try:        progress += 1        request.db.execute(            'update bhailog set progress = (?) where sessionhash = (?);',[progress,sessionHash])        request.db.execute('insert into events (sessionhash,description) values (?,?);',[sessionHash,'Progress incremented to '+str(progress)])        request.db.execute('insert into trials (sessionhash,progress,count) values (?,?,?);',[sessionHash,progress,0])        request.db.commit()    except Exception as e:        log.error("[incrementProgress] Had to increment progress but db call failed. - "+str(e))        return    log.info("[incrementProgress] progress incremented for sessionHash : "+sessionHash+" :)")def getProgressUsingSession(request):    log.debug("entered getProgressUsingSession")    sessionHash = getSessionHash(request)    sessionHash = getSessionHashString(sessionHash)    log.info("[getProgressUsingSession] have to get progress using session. sessionHash = "+str(sessionHash))    if sessionHash == "null":        return HTTPFound(route_url('homeInError', request))    progress = ""    try:        rs = request.db.execute('select progress from bhailog where sessionhash = (?);',[sessionHash])    except Exception as e:        log.error("[getProgressUsingSession] select query to fetch progress from db failed. - "+str(e))    for row in rs.fetchall():        progress = row[0]    log.info("[getProgressUsingSession] progress fetched, equals "+str(progress))    return progressdef moveToCorrectPage(request):    log.info("Entering moveToCorrectPage")    progress = getProgressUsingSession(request)    sessionHash = getSessionHash(request)    sessionHash = getSessionHashString(sessionHash)    log.info("[moveToCorrectPage] progress = "+str(progress)+" for sessionHash:"+sessionHash)    #here    if(progress == 0):        log.debug("[moveToCorrectPage] redirecting to game page")        return HTTPFound(route_url('show_game', request))    elif(progress == 1):        log.debug("[moveToCorrectPage] redirecting to first page")        return HTTPFound(route_url('show_first', request))    elif(progress == 2):        log.debug("[moveToCorrectPage] redirecting to second page")        return HTTPFound(route_url('show_second', request))    elif(progress == 3):        log.debug("[moveToCorrectPage] redirecting to thid page")        return HTTPFound(route_url('show_third', request))    elif(progress == 4):        log.debug("[moveToCorrectPage] redirecting to final page")        return HTTPFound(route_url('show_final', request))    elif(progress == 5):        log.debug("[moveToCorrectPage] redirecting to completed page")        return HTTPFound(route_url('show_completed',request))    else:        log.debug("[moveToCorrectPage] redirecting to home page with optional message")        return HTTPFound(route_url('homeInError', request))########## --------- Encryption methods -------------------key = 'abcdefghijklmnopqrstuvwxyz'def encrypt(n, plaintext):    """Encrypt the string and return the ciphertext"""    result = ''    for l in plaintext.lower():        try:            i = (key.index(l) + n) % 26            result += key[i]        except ValueError:            result += l    return result.lower()def decrypt(n, ciphertext):    """Decrypt the string and return the plaintext"""    result = ''    for l in ciphertext:        try:            i = (key.index(l) - n) % 26            result += key[i]        except ValueError:            result += l    return resultdef getRandomString():    return ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(10))def getEncryptedRandomString(randomString):    return encrypt(9,randomString)def getCurrentTime():    return int(time.time())#import hashlib# hash_str = hashlib.sha256('hello world')# hex_dig = hash_str.hexdigest()# hex_dig####################### ------------ Session variables -----------def setSessionHash(request,sessionHash):    session = request.session    session['sessionHash'] = sessionHashdef getSessionHash(request):    session = request.session    print session    if 'sessionHash' in session:        return session['sessionHash']    else:        log.error("[getSessionHash] Couldn't find sessionHash in session. Will return null.")        return "null"########## ------------- Handling 0th Page ------------------@view_config(route_name='home',request_method='GET',renderer='htmls/main.pt')def home(request):    return {        'errors': '',        'optionalmsg':'',        'message' : 'Please enter your correct details to signup/login for the puzzle.<br> We will contact you via these in case you win.'    }@view_config(route_name='homeInError',request_method='GET',renderer='htmls/main.pt')def homeInError(request):    return {        'errors': '',        'optionalmsg':'So sorry, session was lost or something went wrong.',        'message' : 'Please enter your details again to signup/login for the puzzle'    }@view_config(route_name='home',request_method='POST',renderer='htmls/main.pt')def handleSignup(request):    log.debug("entered handleSignup")    dict = {}    for key,value in request.POST.items():        key1 = key.encode('ascii','ignore')        value1 = value.encode('ascii','ignore')        dict[str(key1)] = str(value1)        if(checkForEmptyValue(value)):            log.error("[handleSignup] "+key+" has empty value. Can't signup like this.")            return signup_failed()    log.info("[handleSignup] values submitted for signup/login are "+str(dict))    if(nameIsValid(dict['name'])):        # todo - add a verification code for email        return successful_signup(request,dict)    else:        return signup_failed()############ ------------- DEFAULT for all pages -------------def incrementCountForTrials(request):    progress = getProgressUsingSession(request)    sessionhash = getSessionHash(request)    sessionhash = getSessionHashString(sessionhash)    try:        request.db.execute('update trials set count = count + ? where progress = (?) and sessionhash = (?);',[1,progress,sessionhash])        request.db.commit()    except Exception as e:        log.error("[incrementCountForTrials] could not increment count in trial. - "+str(e))    passdef exceededTrials(request):    progress = getProgressUsingSession(request)    sessionhash = getSessionHash(request)    sessionhash = getSessionHashString(sessionhash)    try:        rs = request.db.execute('select count from trials where progress = (?) and sessionhash = (?);',[progress,sessionhash])    except Exception as e:        log.error("[incrementCountForTrials] could not increment count in trial. - "+str(e))    for row in rs.fetchall():        count = int(row[0])        if count >= 100:            return True        else:            return Falsedef getStuffForTeesra(request):    log.debug("entered getStuffForTeesra")    timeStart = time.time()    randomString = getRandomString()    sessionHash = getSessionHash(request)    sessionHash = getSessionHashString(sessionHash)    if(sessionHash == 'null'):        log.error("[getStuffForTeesra] Session got null somehow. Redirecting to first page.")        return moveToCorrectPage(request)    cipherRandomString = getEncryptedRandomString(randomString)    timeVal = getCurrentTime()    try:        request.db.execute('insert or replace into khazana (sessionhash,time,randomstring) values (?,?,?);',[sessionHash,str(timeVal),randomString])        request.db.execute('insert into events (sessionhash, description) values (?,?);',[sessionHash,'Requested another random string'])        request.db.commit()    except Exception as e:        log.error("[getStuffForTeesra] Had to insert into treasure but couldn't. - "+str(e))    log.debug("[getStuffForTeesra] added new time and randomstring values for session:"+sessionHash)    timeFin = time.time()    print str(timeFin-timeStart)    log.info('[getStuffForTeesra] It took %0.3f ms' % ((timeFin-timeStart)*1000.0))    return {        'errors':'',        'randomString':cipherRandomString    }def getCorrectJsonForProgress(request,actualProgress):    #here    if(actualProgress == 0):        val = random.randint(1,100)        return {'val':val,'info':''}    elif(actualProgress == 1):        return {'errors':''}    elif(actualProgress == 2):        return {'errors':''}    elif(actualProgress == 3):        return getStuffForTeesra(request)    elif(actualProgress == 4):        return {            'status_of_answer_submission':'',            'color':'beige'        }    elif(actualProgress == 5):        return {'email':'bhavul.g@endurance.com'}def ensureProgressIsCorrect(request,correctProgress):    actualProgress = getProgressUsingSession(request)    log.info("[ensureProgressIsCorrect] actualProgress = "+str(actualProgress))    # todo - check that if guy is done with everything he can't jump back    if actualProgress == correctProgress:        log.info("[ensureProgressIsCorrect] actual progress is correct progress.")        return getCorrectJsonForProgress(request,actualProgress)    else:        log.error("[ensureProgressIsCorrect] actual progress and correct progress differ. Will move to correct page.")        return moveToCorrectPage(request)########## ------------- Handling 1st Page ------------------@view_config(route_name='show_first',             request_method='GET',             renderer='htmls/first.pt')def levelone(request):    return ensureProgressIsCorrect(request,1)@view_config(route_name='show_first',             request_method='POST',             renderer='htmls/first.pt')def handleLevelOneResponse(request):    progress = getProgressUsingSession(request)    if int(progress) != 1:        log.warning("[handleLevelOneResponse] someone's goofing around, making POST call where he should not.")        return moveToCorrectPage(request)    dict = {}    for key,value in request.POST.items():        key1 = key.encode('ascii','ignore')        value1 = value.encode('ascii','ignore')        dict[str(key1)] = str(value1)    if not (dict['name'].upper() == 'JOHN'):        log.debug("[handleLevelOneResponse] name entered isn't John. It is "+dict['name']+". Hence, redirecting to wrong page.")        return HTTPFound(route_url('show_wrong_second', request, _query={'name':dict['name']}))    else:        incrementProgress(request)        log.info("[handleLevelOneResponse] name entered is John. Let's go forward.")        return moveToCorrectPage(request)########## ------------- Handling 2nd Page ------------------@view_config(route_name='show_wrong_second',             request_method='GET',             renderer='htmls/second.pt')def leveltwowrong(request):    name = request.params['name']    if name.upper() == 'JOHN':        return {'message':'Good try. But this is not the correct way to login as John. Go back, try again.'}    else:        return {'message':'But you have reached a dead end. :( '}@view_config(route_name='show_second',             request_method='GET',             renderer='htmls/two.pt')def leveltwo(request):    return ensureProgressIsCorrect(request,2)@view_config(route_name='show_second',             request_method='POST',             renderer='htmls/two.pt')def handleLevelTwo(request):    progress = getProgressUsingSession(request)    if int(progress) != 2:        log.warning("[handleLevelTwo] someone's goofing around, making POST call where he should not.")        return moveToCorrectPage(request)    if exceededTrials(request):        return {'errors':'You have exceeded the permitted number of submissions. You can not play anymore. Sorry.'}    incrementCountForTrials(request)    dict = {}    for key,value in request.POST.items():        key1 = key.encode('ascii','ignore')        value1 = value.encode('ascii','ignore')        dict[str(key1)] = str(value1)    sessionHash = getSessionHash(request)    sessionHash = getSessionHashString(sessionHash)    log.info("[handleLevelTwo] sessionHash - "+sessionHash+", the username and password submitted are - "+str(dict))    if not 'username' in dict:        return {'errors':'Username/Password is not correct. Please re-enter.'}    if not 'password' in dict:        return {'errors':'Username/Password is not correct. Please re-enter.'}    if checkForEmptyValue(dict['username']) or checkForEmptyValue(dict['password']):        return {'errors':'Username/Password is not correct. Please re-enter.'}    if dict['username'] == 'johndoe' and dict['password'] == 'OfcoursenotHiddEn1':        incrementProgress(request)        return moveToCorrectPage(request)    else:        if dict['username'] == 'johndoe' and dict['password'] != 'OfcoursenotHiddEn':            return {'errors':'Password is still not correct. Please re-enter.'}        elif dict['username'] == 'johndoe' and dict['password'] == 'OfcoursenotHiddEn':            return {'errors':'Password is still not correct. But you are so damn close! Please re-enter.'}        else:            return {'errors':'Username/Password is not correct. Please re-enter.'}########## ------------- Handling 3rd Page ------------------@view_config(route_name='show_third',             request_method='GET',             renderer='htmls/teesra.pt')def levelthree(request):    session = request.session    log.debug("[levelthree] session in levelthree method is "+str(session))    return ensureProgressIsCorrect(request,3)@view_config(route_name='show_third',             request_method='POST',             renderer='htmls/teesra.pt')def handleLevelThree(request):    progress = getProgressUsingSession(request)    if int(progress) != 3:        log.warning("[handleLevelThree] someone's goofing around, making POST call where he should not.")        return moveToCorrectPage(request)    dict = {}    for key,value in request.POST.items():        key1 = key.encode('ascii','ignore')        value1 = value.encode('ascii','ignore')        dict[str(key1)] = str(value1)    if not 'answer' in dict:        log.warning("[handleLevelThree] answer was not given, but page submitted. Reloading page.")        return getStuffForTeesra(request)    if (checkForEmptyValue(dict['answer'])):        log.warning("[handleLevelThree] answer is empty. Reloading page.")        return getStuffForTeesra(request)    timeStart = time.time()    timeVal = getCurrentTime()    sessionHash = getSessionHash(request)    sessionHash = getSessionHashString(sessionHash)    if sessionHash == 'null':        log.warning("[handleLevelThree] since session was null, can't accept the input. Reloading login page.")        return HTTPFound(route_url('homeInError', request))    try:        rs = request.db.execute('select time,randomstring from khazana where sessionhash = (?);',[sessionHash])    except Exception as e:        log.error("[handleLevelThree] had to get time and randomstring from db, but failed. - "+str(e))    timeFromDb = 0    randomstringFromDb = " "    for row in rs.fetchall():        timeFromDb = row[0]        randomstringFromDb = row[1]        log.info("[handleLevelThree] fetched time,randomstring from db. row = "+str(row))        break;    timeFin = time.time()    log.info('[handleLevelThree] handling response of teesra function took %0.3f ms' % ((timeFin-timeStart)*1000.0))    if dict['answer'] == randomstringFromDb and (timeVal-int(timeFromDb) <= 1):        log.info("[handleLevelThree] That was correct for sessionHash"+sessionHash+" and submitted in "+str((timeVal-int(timeFromDb)))+" time.")        incrementProgress(request)        return HTTPFound(route_url('show_final', request))    else:        log.info("[handleLevelThree] Couldn't get through for sessionHash"+sessionHash+" >> answer:"+dict['answer']+",randomstringfromdb:"+str(randomstringFromDb)+" | time now:"+str(timeVal)+", timefromdb:"+str(timeFromDb))        return getStuffForTeesra(request)########## ------------- Handling 4th Page ------------------@view_config(route_name='show_final',             request_method='GET',             renderer='htmls/final.pt')def levelFinal(request):    return ensureProgressIsCorrect(request,4)def storefinalsubmission(request,dict):    if not 'code' in dict:        dict['code'] = " "    sessionhash = getSessionHash(request)    sessionhash = getSessionHashString(sessionhash)    try:        request.db.execute('insert or replace into finalsubmission (sessionhash,answer,linktocode) values (?,?,?);',[sessionhash,dict['answer'],dict['code']])        request.db.commit()    except Exception as e:        log.error("[storefinalsubmission] could not save final answer of "+sessionhash+". Reason - "+str(e))    pass@view_config(route_name='show_final',             request_method='POST',             renderer='htmls/final.pt')def handleLevelFinal(request):    progress = getProgressUsingSession(request)    if int(progress) != 4:        log.warning("[handleLevelFinal] someone's goofing around, making POST call where he should not.")        return moveToCorrectPage(request)    if exceededTrials(request):        return {'status_of_answer_submission':'You have done more submissions than permitted. You can not submit anymore, sorry.',                'color':'beige'}    incrementCountForTrials(request)    dict = {}    for key,value in request.POST.items():        key1 = key.encode('ascii','ignore')        value1 = value.encode('ascii','ignore')        dict[str(key1)] = str(value1)    log.info("[handleLevelFinal] answer details submitted - "+str(dict))    if not 'answer' in dict:        return {'status_of_answer_submission':'Your submission was not proper and was not counted. You can re-submit if you wish.',                'color':'beige'}    storefinalsubmission(request,dict)    if dict['answer'] == '2926319':        incrementProgress(request)        log.info("[handleLevelFinal] This guy has finally done it - "+getSessionHashString(getSessionHash(request)))        return HTTPFound(route_url('show_completed', request))    else:        return {'status_of_answer_submission':'Your answer is not correct. You can re-submit if you wish. We store your latest submission.',                'color':'beige'}########## ------------- Handling 5th Page ------------------@view_config(route_name='show_completed',             request_method='GET',             renderer='htmls/completed.pt')def levelCompleted(request):    return ensureProgressIsCorrect(request,5)@view_config(route_name='show_completed',             request_method='POST',             renderer='htmls/completed.pt')def handleLevelCompleted(request):    return ensureProgressIsCorrect(request,5)########## ------------- Handling 0th Page ------------------@view_config(route_name='show_game',             request_method='GET',             renderer='htmls/game.pt')def levelZero(request):    return ensureProgressIsCorrect(request,0)@view_config(route_name='show_game',             request_method='POST',             renderer='htmls/game.pt')def handleLevelZero(request):    dict = {}    for key,value in request.POST.items():        key1 = key.encode('ascii','ignore')        value1 = value.encode('ascii','ignore')        dict[str(key1)] = str(value1)    if dict['hiddenval'] == dict['value']:        incrementProgress(request)        log.info("[handleLevelZero] Correct value chosen. Let's go forward.")        return HTTPFound(route_url('show_hoodie', request))    else:        val = random.randint(1,100)        return {'val':val,'info':'Your answer was incorrect. How about another try? This could get you some awesome freebie.'}        return HTTPFound(route_url('show_game', request))@view_config(route_name='show_hoodie',             request_method='GET',             renderer='htmls/hoodie.pt')def levelHoodie(request):    return {}